{"version":3,"sources":["providers/NumbersProvider.tsx","containers/NumberButton/index.tsx","containers/NumberButton/NumberButton.tsx","containers/Display/index.ts","containers/Display/Display.tsx","containers/ClearButton/index.ts","containers/ClearButton/ClearButton.tsx","containers/OperatorButton/index.js","containers/OperatorButton/OperatorButton.js","containers/EqualsButton/index.js","containers/EqualsButton/EqualsButton.js","containers/DecimalButton/index.ts","containers/DecimalButton/DecimalButton.tsx","containers/Calculator/index.ts","containers/Calculator/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialContext","number","enteringNumber","storedNumber","decimalWillBeAdded","numberHasDecimal","isCalculating","operatorType","setNumber","setEnteringNumber","setStoredNumber","setContext","Error","handleSetDisplayValue","handleClearValues","setOperatorType","setDecimalWillBeAdded","setNumberHasDecimal","setIsCalculating","handleChooseOperatorType","handleSetStoredValue","handleCalculations","handleAddDecimal","handleSetIsCalculating","NumberContext","createContext","NumberContextProvider","children","useState","contextState","status","Provider","value","String","length","concat","alert","result","simplify","evaluate","Math","round","copyEnteringNumber","indexOf","numberOfOperatorsSinceLastDecimal","i","match","handleCheckToAvoidAddingDoubleDecimals","enteringNumberWithConcattedDecimal","NumberButton","id","useContext","className","onClick","Display","ClearButton","type","OperatorButton","opType","EqualsButton","DecimalButton","Calculator","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e00f19ca.chunk.js","sourcesContent":["import React, {\n  createContext,\n  Dispatch,\n  SetStateAction,\n  useState\n} from \"react\";\n\nimport { simplify } from \"mathjs\";\n\ntype Context = {\n  number: number | string;\n  enteringNumber: number | string;\n  storedNumber: number | string;\n  operatorType: string;\n  decimalWillBeAdded: boolean;\n  numberHasDecimal: boolean;\n  isCalculating: boolean;\n  setContext: Dispatch<SetStateAction<Context>>;\n  setNumber: Dispatch<SetStateAction<number | string>>;\n  setEnteringNumber: Dispatch<SetStateAction<number | string>>;\n  setStoredNumber: Dispatch<SetStateAction<number | string>>;\n  setOperatorType: Dispatch<SetStateAction<string>>;\n  setIsCalculating: Dispatch<SetStateAction<boolean>>;\n  handleSetDisplayValue: (value: number | string) => void;\n  setDecimalWillBeAdded: Dispatch<SetStateAction<boolean>>;\n  setNumberHasDecimal: Dispatch<SetStateAction<boolean>>;\n  handleClearValues: () => void;\n  handleSetStoredValue: () => void;\n  handleChooseOperatorType: (opType: string) => void;\n  handleCalculations: () => void;\n  handleAddDecimal: () => void;\n  handleSetIsCalculating: (status: boolean) => void;\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst initialContext: Context = {\n  number: 0,\n  enteringNumber: 0,\n  storedNumber: 0,\n  decimalWillBeAdded: false,\n  numberHasDecimal: false,\n  isCalculating: true,\n  operatorType: \"\",\n  setNumber: (): void => {},\n  setEnteringNumber: (): void => {},\n  setStoredNumber: (): void => {},\n  setContext: (): void => {\n    throw new Error(\"setContext function must be overridden.\");\n  },\n  handleSetDisplayValue: (): void => {},\n  handleClearValues: (): void => {},\n  setOperatorType: (): void => {},\n  setDecimalWillBeAdded: (): void => {},\n  setNumberHasDecimal: (): void => {},\n  setIsCalculating: (): void => {},\n  handleChooseOperatorType: (): void => {},\n  handleSetStoredValue: (): void => {},\n  handleCalculations: (): void => {},\n  handleAddDecimal: (): void => {},\n  handleSetIsCalculating: (): void => {}\n};\n\nconst NumberContext = createContext<Context>(initialContext);\n\nconst NumberContextProvider = ({ children }: Props): JSX.Element => {\n  const [contextState, setContext] = useState<Context>(initialContext);\n  const [number, setNumber] = useState<string | number>(0);\n  const [storedNumber, setStoredNumber] = useState<string | number>(0);\n  const [enteringNumber, setEnteringNumber] = useState<string | number>(0);\n  const [operatorType, setOperatorType] = useState<string>(\"\");\n  const [isCalculating, setIsCalculating] = useState<boolean>(false);\n\n  const handleSetDisplayValue = (value: number | string) => {\n    if (String(number).length < 15) {\n      if (!number) {\n        setNumber(value);\n        setEnteringNumber(String(value));\n      } else {\n        if (value === 0) {\n          setNumber(\"\".concat(\"\" + number + value));\n          setEnteringNumber(\"\".concat(\"\" + number + value));\n        } else {\n          setNumber(\"\" + number + value);\n          setEnteringNumber(\"\" + number + value);\n        }\n      }\n    } else {\n      alert(\"maximum character limit exceeded\");\n    }\n  };\n\n  const handleSetIsCalculating = (status: boolean) => {\n    setIsCalculating(status);\n  };\n\n  const handleClearValues = () => {\n    setNumber(0);\n    setStoredNumber(0);\n    setEnteringNumber(0);\n  };\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber(0);\n  };\n\n  const handleCalculations = () => {\n    if (enteringNumber && isCalculating) {\n      let result: any = simplify(String(enteringNumber));\n      result = result.evaluate();\n      result = Math.round(result * 10000000000) / 10000000000;\n      setStoredNumber(result);\n      setEnteringNumber(result);\n      setNumber(result);\n    }\n    handleSetIsCalculating(false);\n  };\n\n  const handleCheckToAvoidAddingDoubleDecimals = () => {\n    let copyEnteringNumber: number | string = String(enteringNumber);\n    if (copyEnteringNumber.indexOf(\".\") === -1) {\n      return true;\n    } else {\n      let numberOfOperatorsSinceLastDecimal = 0;\n      for (let i = 0; i < copyEnteringNumber.length; i += 1) {\n        if (copyEnteringNumber[i].match(/[+-/*]/)) {\n          numberOfOperatorsSinceLastDecimal += 1;\n        }\n        if (copyEnteringNumber[i] === \".\") {\n          numberOfOperatorsSinceLastDecimal = 0;\n        }\n        if (numberOfOperatorsSinceLastDecimal) {\n          copyEnteringNumber = copyEnteringNumber + \"\";\n          return true;\n        }\n      }\n    }\n  };\n\n  const handleAddDecimal = () => {\n    if (handleCheckToAvoidAddingDoubleDecimals()) {\n      const enteringNumberWithConcattedDecimal = enteringNumber + \".\";\n      if (\n        enteringNumberWithConcattedDecimal !== enteringNumber &&\n        !storedNumber\n      ) {\n        setEnteringNumber(enteringNumberWithConcattedDecimal);\n        setNumber(enteringNumberWithConcattedDecimal);\n      } else if (String(number).indexOf(\".\") === -1 && !storedNumber) {\n        setNumber(\"0.\");\n        setEnteringNumber(\"0.\");\n      } else if (String(number).indexOf(\".\") === -1) {\n        setNumber(number + \".\");\n        setEnteringNumber(enteringNumber + \".\");\n      }\n    }\n  };\n\n  return (\n    <NumberContext.Provider\n      value={{\n        ...contextState,\n        setContext,\n        number,\n        setNumber,\n        enteringNumber,\n        setEnteringNumber,\n        handleSetDisplayValue,\n        storedNumber,\n        setStoredNumber,\n        operatorType,\n        setOperatorType,\n        handleClearValues,\n        handleSetStoredValue,\n        handleSetIsCalculating,\n        handleCalculations,\n        handleAddDecimal\n      }}\n    >\n      {children}\n    </NumberContext.Provider>\n  );\n};\n\nexport { NumberContext, NumberContextProvider };\n","import NumberButton from './NumberButton';\nexport default NumberButton;","import React, { useContext } from 'react';\nimport { NumberContext } from '../../providers/NumbersProvider';\nimport './styles.scss';\ninterface iNumberButtonProps {\n  number: number;\n  id: string;\n}\nconst NumberButton: React.FC<iNumberButtonProps> = ({ number, id }) => {\n  const { handleSetDisplayValue } = useContext(NumberContext);\n\n  return (\n    <button className=\"number-btn\" id={`${id}`} onClick={() => handleSetDisplayValue(number)}>{number}</button>\n  )\n}\n\nexport default NumberButton;","import Display from './Display';\nexport default Display;","import React, { useContext } from \"react\";\nimport { NumberContext } from \"../../providers/NumbersProvider\";\nimport \"./styles.scss\";\n\nconst Display: React.FC = () => {\n  const { enteringNumber } = useContext(NumberContext);\n  return (\n    <>\n      <h2 id=\"display\">{enteringNumber}</h2>\n    </>\n  );\n};\n\nexport default Display;\n","import ClearButton from './ClearButton';\nexport default ClearButton;","import React, { useContext } from \"react\";\nimport { NumberContext } from \"../../providers/NumbersProvider\";\nimport \"./styles.scss\";\n\nconst ClearButton = () => {\n  const { handleClearValues } = useContext(NumberContext);\n  return (\n    <button type=\"button\" id=\"clear\" onClick={() => handleClearValues()}>\n      <span className=\"clear-text\">AC</span>\n    </button>\n  );\n};\n\nexport default ClearButton;\n","import OperatorButton from \"./OperatorButton\";\nexport default OperatorButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"../../providers/NumbersProvider\";\nimport \"./styles.scss\";\n\nconst OperatorButton = ({ opType, id }) => {\n  const { handleSetDisplayValue } = useContext(NumberContext);\n  return (\n    <button\n      type=\"button\"\n      className=\"calculator-arithmetic-operator\"\n      id={id}\n      onClick={() => handleSetDisplayValue(opType)}\n    >\n      <span>{opType}</span>\n    </button>\n  );\n};\n\nexport default OperatorButton;\n","import EqualsButton from \"./EqualsButton\";\nexport default EqualsButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"../../providers/NumbersProvider\";\nimport \"./styles.scss\";\n\nconst EqualsButton = () => {\n  const { handleSetIsCalculating } = useContext(NumberContext);\n  return (\n    <button\n      type=\"button\"\n      className=\"calculator-arithmetic-operator\"\n      id=\"equals\"\n      onClick={() => handleSetIsCalculating(true)}\n    >\n      <span>=</span>\n    </button>\n  );\n};\n\nexport default EqualsButton;\n","import DecimalButton from \"./DecimalButton\";\nexport default DecimalButton;\n","import React, { useContext } from \"react\";\nimport { NumberContext } from \"../../providers/NumbersProvider\";\nimport \"./styles.scss\";\n\nconst DecimalButton = () => {\n  const { handleAddDecimal } = useContext(NumberContext);\n  return (\n    <button\n      type=\"button\"\n      id=\"decimal\"\n      className=\"calculator-arithmetic-operator\"\n      onClick={() => handleAddDecimal()}\n    >\n      <span>.</span>\n    </button>\n  );\n};\n\nexport default DecimalButton;\n","import Calculator from './Calculator';\nexport default Calculator;","import React from \"react\";\nimport \"./styles.scss\";\nimport NumberButton from \"../NumberButton\";\nimport Display from \"../Display\";\nimport ClearButton from \"../ClearButton\";\nimport OperatorButton from \"../OperatorButton\";\nimport EqualsButton from \"../EqualsButton\";\nimport DecimalButton from \"../DecimalButton\";\n\nconst Calculator = () => {\n  return (\n    <div className=\"calculator\">\n      <Display />\n      <ClearButton />\n      <div className=\"flex-row\">\n        <NumberButton number={1} id=\"one\" />\n        <NumberButton number={2} id=\"two\" />\n        <NumberButton number={3} id=\"three\" />\n        <OperatorButton opType={\"/\"} id=\"divide\" />\n      </div>\n      <div className=\"flex-row\">\n        <NumberButton number={4} id=\"four\" />\n        <NumberButton number={5} id=\"five\" />\n        <NumberButton number={6} id=\"six\" />\n        <OperatorButton opType={\"-\"} id=\"subtract\" />\n      </div>\n      <div className=\"flex-row\">\n        <NumberButton number={7} id=\"seven\" />\n        <NumberButton number={8} id=\"eight\" />\n        <NumberButton number={9} id=\"nine\" />\n        <OperatorButton opType={\"*\"} id=\"multiply\" />\n      </div>\n      <div className=\"flex-row\">\n        <NumberButton number={0} id=\"zero\" />\n        <OperatorButton opType={\"+\"} id=\"add\" />\n        <EqualsButton />\n        <DecimalButton />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport './App.css';\nimport Calculator from '../src/containers/Calculator';\nimport { NumberContextProvider } from '../src/providers/NumbersProvider';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NumberContextProvider>\n        <Calculator />\n      </NumberContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}